/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
 * @description –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ö—É–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ JSDoc –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º—ã: –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
 */

import * as fs from 'fs';
import * as path from 'path';
import { execSync } from 'child_process';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—à–∏–±–∫–∏ JSDoc
 */
interface JSDocError {
    /** –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É */
    file: string;
    /** –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ */
    line: number;
    /** –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ */
    function: string;
    /** –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */
    message: string;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–ø—Ü–∏–π –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
interface ParsedOptions {
    /** –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ */
    mode: 'full' | 'new' | 'staged';
    /** –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É */
    help: boolean;
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ TS/JS —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 * @param dir - –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @param fileList - –ú–∞—Å—Å–∏–≤ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
 * @returns –ú–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –∫ TS/JS —Ñ–∞–π–ª–∞–º
 */
function getTSFiles(dir: string, fileList: string[] = []): string[] {
    const files = fs.readdirSync(dir);

    files.forEach(file => {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);

        if (stat.isDirectory()) {
            getTSFiles(filePath, fileList);
        } else if (file.endsWith('.ts') || file.endsWith('.js')) {
            fileList.push(filePath);
        }
    });

    return fileList;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ JSDoc
 * @param filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @returns –ú–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫
 */
function checkFileForJSDoc(filePath: string): JSDocError[] {
    const content = fs.readFileSync(filePath, 'utf8');
    const errors: JSDocError[] = [];
    const lines = content.split('\n');

    // –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ JSDoc (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ TypeScript –∏ JavaScript)
    const functionRegex = /(?:^|\n)\s*(?:export\s+)?(?:function\s+(\w+)|(?:const|let|var)\s+(\w+)\s*=\s*(?:function|\(.*?\)\s*=>))/g;

    let match: RegExpExecArray | null;
    while ((match = functionRegex.exec(content)) !== null) {
        const functionName = match[1] || match[2];
        const matchIndex = match.index;

        // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
        const beforeMatch = content.substring(0, matchIndex);
        const lineNumber = beforeMatch.split('\n').length;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–µ—Ä–µ–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π
        const linesBefore = lines.slice(Math.max(0, lineNumber - 10), lineNumber - 1);
        const hasJSDoc = linesBefore.some(line => line.trim().includes('/**'));

        if (!hasJSDoc) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –≤ –∫–æ–ª–±—ç–∫–µ
            const isCallback = content.substring(Math.max(0, matchIndex - 50), matchIndex)
                .includes('(') && !match[0].includes('function ' + functionName);

            if (!isCallback) {
                errors.push({
                    file: filePath,
                    line: lineNumber,
                    function: functionName,
                    message: `–§—É–Ω–∫—Ü–∏—è "${functionName}" –Ω–µ –∏–º–µ–µ—Ç JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è`
                });
            }
        }
    }

    return errors;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ Git
 * @param mode - –†–µ–∂–∏–º: 'staged' –¥–ª—è staged —Ñ–∞–π–ª–æ–≤, 'diff' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö
 * @returns –ú–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º TS/JS —Ñ–∞–π–ª–∞–º
 */
function getChangedFiles(mode: 'staged' | 'diff' = 'staged'): string[] {
    try {
        let command: string;
        if (mode === 'staged') {
            command = 'git diff --cached --name-only --diff-filter=AM';
        } else {
            command = 'git diff --name-only --diff-filter=AM HEAD~1';
        }

        const output = execSync(command, { encoding: 'utf8' });
        return output.split('\n')
            .filter(file => (file.endsWith('.ts') || file.endsWith('.js')) && file.startsWith('src/'))
            .map(file => file.trim())
            .filter(file => file.length > 0);
    } catch (error) {
        console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ Git');
        return [];
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
 * @param filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @returns –ú–∞—Å—Å–∏–≤ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
 */
function getNewFunctionsInFile(filePath: string): JSDocError[] {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞
        const currentContent = fs.readFileSync(filePath, 'utf8');

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ Git
        let previousContent = '';
        try {
            previousContent = execSync(`git show HEAD:${filePath}`, { encoding: 'utf8' });
        } catch (error) {
            // –§–∞–π–ª –Ω–æ–≤—ã–π, –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–æ–≤—ã–º–∏
            return checkFileForJSDoc(filePath);
        }

        // –ù–∞—Ö–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ–±–µ–∏—Ö –≤–µ—Ä—Å–∏—è—Ö
        const currentFunctions = extractFunctionNames(currentContent);
        const previousFunctions = extractFunctionNames(previousContent);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        const newFunctionNames = currentFunctions.filter(func =>
            !previousFunctions.includes(func)
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        const allErrors = checkFileForJSDoc(filePath);
        return allErrors.filter(error =>
            newFunctionNames.includes(error.function)
        );

    } catch (error) {
        console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ ${filePath}:`, (error as Error).message);
        return checkFileForJSDoc(filePath);
    }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
 * @param content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
 * @returns –ú–∞—Å—Å–∏–≤ –∏–º–µ–Ω —Ñ—É–Ω–∫—Ü–∏–π
 */
function extractFunctionNames(content: string): string[] {
    const functionNames: string[] = [];
    const functionRegex = /(?:^|\n)\s*(?:export\s+)?(?:function\s+(\w+)|(?:const|let|var)\s+(\w+)\s*=\s*(?:function|\(.*?\)\s*=>))/g;

    let match: RegExpExecArray | null;
    while ((match = functionRegex.exec(content)) !== null) {
        const functionName = match[1] || match[2];
        if (functionName) {
            functionNames.push(functionName);
        }
    }

    return functionNames;
}

/**
 * –ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 * @returns –û–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */
function parseArgs(): ParsedOptions {
    const args = process.argv.slice(2);
    const options: ParsedOptions = {
        mode: 'full', // 'full', 'new', 'staged'
        help: false
    };

    args.forEach(arg => {
        switch (arg) {
            case '--new':
            case '-n':
                options.mode = 'new';
                break;
            case '--staged':
            case '-s':
                options.mode = 'staged';
                break;
            case '--full':
            case '-f':
                options.mode = 'full';
                break;
            case '--help':
            case '-h':
                options.help = true;
                break;
        }
    });

    return options;
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
 */
function showHelp(): void {
    console.log('üîç –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('  npm run check:jsdoc [–æ–ø—Ü–∏–∏]\n');
    console.log('–û–ø—Ü–∏–∏:');
    console.log('  -f, --full     –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');
    console.log('  -n, --new      –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å HEAD)');
    console.log('  -s, --staged   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ staged —Ñ–∞–π–ª–æ–≤');
    console.log('  -h, --help     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n');
    console.log('–ü—Ä–∏–º–µ—Ä—ã:');
    console.log('  npm run check:jsdoc           # –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
    console.log('  npm run check:jsdoc -- --new # –¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏');
    console.log('  npm run check:jsdoc -- -s    # –¢–æ–ª—å–∫–æ staged —Ñ–∞–π–ª—ã');
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
function main(): void {
    const options = parseArgs();

    if (options.help) {
        showHelp();
        return;
    }

    let modeDescription: string;
    let filesToCheck: string[] = [];

    switch (options.mode) {
        case 'new':
            modeDescription = '–Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å HEAD)';
            const changedFiles = getChangedFiles('diff');
            if (changedFiles.length === 0) {
                console.log('‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö TS/JS —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
                return;
            }
            filesToCheck = changedFiles;
            break;

        case 'staged':
            modeDescription = 'staged —Ñ–∞–π–ª–æ–≤';
            const stagedFiles = getChangedFiles('staged');
            if (stagedFiles.length === 0) {
                console.log('‚úÖ –ù–µ—Ç staged TS/JS —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
                return;
            }
            filesToCheck = stagedFiles;
            break;

        case 'full':
        default:
            modeDescription = '–≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π';
            filesToCheck = getTSFiles('src');
            break;
    }

    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${modeDescription}\n`);

    let totalErrors = 0;

    filesToCheck.forEach(file => {
        let errors: JSDocError[];

        if (options.mode === 'new') {
            errors = getNewFunctionsInFile(file);
        } else {
            errors = checkFileForJSDoc(file);
        }

        if (errors.length > 0) {
            console.log(`‚ùå ${path.relative(process.cwd(), file)}:`);
            errors.forEach(error => {
                const prefix = options.mode === 'new' ? '   [–ù–û–í–ê–Ø] ' : '   ';
                console.log(`${prefix}–°—Ç—Ä–æ–∫–∞ ${error.line}: ${error.message}`);
                totalErrors++;
            });
            console.log('');
        }
    });

    if (totalErrors === 0) {
        console.log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!');
    } else {
        console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${totalErrors} —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);
        console.log('\nüí° –î–æ–±–∞–≤—å—Ç–µ JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π:');
        console.log('/**');
        console.log(' * –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏');
        console.log(' * @param {type} paramName - –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞');
        console.log(' * @returns {type} –û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è');
        console.log(' */');
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (import.meta.url === `file://${process.argv[1]}`) {
    main();
}

export {
    getTSFiles,
    checkFileForJSDoc,
    JSDocError,
    ParsedOptions
};